export default {
  common: {
    inputText: 'Please input',
    selectText: 'Please select',
    startTimeText: 'Start time',
    endTimeText: 'End time',
    login: 'Login',
    required: 'This is required',
    loginOut: 'Login out',
    document: 'Document',
    profile: 'User Center',
    reminder: 'Reminder',
    loginOutMessage: 'Exit the system?',
    back: 'Back',
    ok: 'OK',
    save: 'Save',
    cancel: 'Cancel',
    close: 'Close',
    reload: 'Reload current',
    success: 'Success',
    closeTab: 'Close current',
    closeTheLeftTab: 'Close left',
    closeTheRightTab: 'Close right',
    closeOther: 'Close other',
    closeAll: 'Close all',
    prevLabel: 'Prev',
    nextLabel: 'Next',
    skipLabel: 'Jump',
    doneLabel: 'End',
    menu: 'Menu',
    menuDes: 'Menu bar rendered in routed structure',
    collapse: 'Collapse',
    collapseDes: 'Expand and zoom the menu bar',
    tagsView: 'Tags view',
    tagsViewDes: 'Used to record routing history',
    tool: 'Tool',
    toolDes: 'Used to set up custom systems',
    query: 'Query',
    reset: 'Reset',
    shrink: 'Put away',
    expand: 'Expand',
    confirmTitle: 'System Hint',
    exportMessage: 'Whether to confirm export data item?',
    importMessage: 'Whether to confirm import data item?',
    createSuccess: 'Create Success',
    updateSuccess: 'Update Success',
    delMessage: 'Delete the selected data?',
    delDataMessage: 'Delete the data?',
    delNoData: 'Please select the data to delete',
    delSuccess: 'Deleted successfully',
    index: 'Index',
    status: 'Status',
    createTime: 'Create Time',
    updateTime: 'Update Time',
    copy: 'Copy',
    copySuccess: 'Copy Success',
    copyError: 'Copy Error',
    confirm: 'Confirm',
    actions: 'Actions',
    action: 'Action',
    edit: 'Edit',
    delete: 'Delete',
    create: 'Create',
    batchDelete: 'Batch Delete',
    detail: 'Detail',
    remark: 'Remark',
    export: 'Export',
    id: 'ID',
    search: 'Search',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    pleaseInputRemark: 'Please input remark'
  },
  lock: {
    lockScreen: 'Lock screen',
    lock: 'Lock',
    lockPassword: 'Lock screen password',
    unlock: 'Click to unlock',
    backToLogin: 'Back to login',
    entrySystem: 'Entry the system',
    placeholder: 'Please enter the lock screen password',
    message: 'Lock screen password error'
  },
  error: {
    noPermission: `Sorry, you don't have permission to access this page.`,
    pageError: 'Sorry, the page you visited does not exist.',
    networkError: 'Sorry, the server reported an error.',
    returnToHome: 'Return to home'
  },
  permission: {
    hasPermission: `Please set the operation permission label value`,
    hasRole: `Please set the role permission tag value`
  },
  setting: {
    projectSetting: 'Project setting',
    theme: 'Theme',
    layout: 'Layout',
    systemTheme: 'System theme',
    menuTheme: 'Menu theme',
    interfaceDisplay: 'Interface display',
    breadcrumb: 'Breadcrumb',
    breadcrumbIcon: 'Breadcrumb icon',
    collapseMenu: 'Collapse menu',
    hamburgerIcon: 'Hamburger icon',
    screenfullIcon: 'Screenfull icon',
    sizeIcon: 'Size icon',
    localeIcon: 'Locale icon',
    messageIcon: 'Message icon',
    tagsView: 'Tags view',
    logo: 'Logo',
    greyMode: 'Grey mode',
    fixedHeader: 'Fixed header',
    headerTheme: 'Header theme',
    cutMenu: 'Cut Menu',
    copy: 'Copy',
    clearAndReset: 'Clear cache and reset',
    copySuccess: 'Copy success',
    copyFailed: 'Copy failed',
    footer: 'Footer',
    uniqueOpened: 'Unique opened',
    tagsViewIcon: 'Tags view icon',
    reExperienced: 'Please exit the login experience again',
    fixedMenu: 'Fixed menu'
  },
  size: {
    default: 'Default',
    large: 'Large',
    small: 'Small'
  },
  login: {
    welcome: 'Welcome to the system',
    message: 'Backstage management system',
    tenantname: 'TenantName',
    username: 'Username',
    password: 'Password',
    code: 'verification code',
    login: 'Sign in',
    relogin: 'Sign in again',
    otherLogin: 'Sign in with',
    register: 'Register',
    checkPassword: 'Confirm password',
    remember: 'Remember me',
    hasUser: 'Existing account? Go to login',
    forgetPassword: 'Forget password?',
    tenantNamePlaceholder: 'Please Enter Tenant Name',
    usernamePlaceholder: 'Please Enter Username',
    passwordPlaceholder: 'Please Enter Password',
    codePlaceholder: 'Please Enter Verification Code',
    mobileTitle: 'Mobile sign in',
    mobileNumber: 'Mobile Number',
    mobileNumberPlaceholder: 'Plaease Enter Mobile Number',
    backLogin: 'back',
    getSmsCode: 'Get SMS Code',
    btnMobile: 'Mobile sign in',
    btnQRCode: 'QR code sign in',
    qrcode: 'Scan the QR code to log in',
    btnRegister: 'Sign up',
    SmsSendMsg: 'code has been sent',
    resetPassword: 'Reset Password',
    resetPasswordSuccess: 'Reset Password Success',
    invalidTenantName: 'Invalid Tenant Name'
  },
  captcha: {
    verification: 'Please complete security verification',
    slide: 'Swipe right to complete verification',
    point: 'Please click',
    success: 'Verification succeeded',
    fail: 'verification failed'
  },
  router: {
    login: 'Login',
    home: 'Home',
    analysis: 'Analysis',
    workplace: 'Workplace'
  },
  analysis: {
    newUser: 'New user',
    unreadInformation: 'Unread information',
    transactionAmount: 'Transaction amount',
    totalShopping: 'Total Shopping',
    monthlySales: 'Monthly sales',
    userAccessSource: 'User access source',
    january: 'January',
    february: 'February',
    march: 'March',
    april: 'April',
    may: 'May',
    june: 'June',
    july: 'July',
    august: 'August',
    september: 'September',
    october: 'October',
    november: 'November',
    december: 'December',
    estimate: 'Estimate',
    actual: 'Actual',
    directAccess: 'Airect access',
    mailMarketing: 'Mail marketing',
    allianceAdvertising: 'Alliance advertising',
    videoAdvertising: 'Video advertising',
    searchEngines: 'Search engines',
    weeklyUserActivity: 'Weekly user activity',
    activeQuantity: 'Active quantity',
    monday: 'Monday',
    tuesday: 'Tuesday',
    wednesday: 'Wednesday',
    thursday: 'Thursday',
    friday: 'Friday',
    saturday: 'Saturday',
    sunday: 'Sunday'
  },
  area: {
    title: 'Area & IP',
    ipQuery: 'IP Query',
    id: 'ID',
    name: 'Area Name',
    ip: 'IP',
    address: 'Address',
    pleaseInputIp: 'Please input IP address',
    queryResult: 'Display IP query result',
    ipRequired: 'IP address cannot be empty',
    querySuccess: 'Query successful'
  },
  dept: {
    parentDept: 'Parent Department',
    pleaseSelectParent: 'Please select parent department',
    name: 'Department Name',
    pleaseInputName: 'Please input department name',
    sort: 'Display Order',
    leader: 'Leader',
    pleaseInputLeader: 'Please input leader',
    phone: 'Phone',
    pleaseInputPhone: 'Please input phone number',
    email: 'Email',
    pleaseInputEmail: 'Please input email',
    status: 'Status',
    pleaseSelectStatus: 'Please select status',
    parentDeptRequired: 'Parent department cannot be empty',
    nameRequired: 'Department name cannot be empty',
    sortRequired: 'Display order cannot be empty',
    emailFormatError: 'Please input correct email address',
    phoneFormatError: 'Please input correct phone number',
    statusRequired: 'Status cannot be empty',
    topDept: 'Top Department',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    batchDelete: 'Batch Delete',
    expandCollapse: 'Expand/Collapse',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    deptFormTitleCreate: 'Create Department',
    deptFormTitleEdit: 'Edit Department'
  },
  dict: {
    name: 'Dictionary Name',
    pleaseInputName: 'Please input dictionary name',
    type: 'Dictionary Type',
    pleaseInputType: 'Please input parameter name',
    status: 'Status',
    remark: 'Remark',
    pleaseInputRemark: 'Please input content',
    nameRequired: 'Dictionary name cannot be empty',
    typeRequired: 'Dictionary type cannot be empty',
    statusRequired: 'Status cannot be empty',
    dataLabel: 'Data Label',
    pleaseInputLabel: 'Please input data label',
    dataValue: 'Data Value',
    pleaseInputValue: 'Please input data value',
    sort: 'Display Order',
    colorType: 'Color Type',
    pleaseInputCssClass: 'Please input CSS Class',
    labelRequired: 'Data label cannot be empty',
    valueRequired: 'Data value cannot be empty',
    sortRequired: 'Data order cannot be empty',
    colorTypeOptions: {
      default: 'Default',
      primary: 'Primary',
      success: 'Success',
      info: 'Info',
      warning: 'Warning',
      danger: 'Danger'
    },
    id: 'Dict ID',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    data: 'Data',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    export: 'Export',
    batchDelete: 'Batch Delete',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    startDate: 'Start Date',
    endDate: 'End Date',
    dictFormTitleCreate: 'Create Dict',
    dictFormTitleEdit: 'Edit Dict'
  },
  loginlog: {
    title: 'System Log',
    username: 'Username',
    pleaseInputUsername: 'Please input username',
    loginAddress: 'Login Address',
    pleaseInputLoginAddress: 'Please input login address',
    loginDate: 'Login Date',
    startDate: 'Start Date',
    endDate: 'End Date',
    search: 'Search',
    reset: 'Reset',
    export: 'Export',
    logId: 'Log ID',
    operationType: 'Operation Type',
    browser: 'Browser',
    loginResult: 'Login Result',
    actions: 'Actions',
    detail: 'Detail',
    exportFileName: 'Login Log.xls'
  },
  post: {
    title: 'Post Title',
    pleaseInputTitle: 'Please input post title',
    code: 'Post Code',
    pleaseInputCode: 'Please input post code',
    sort: 'Post Order',
    pleaseInputSort: 'Please input post order',
    status: 'Status',
    pleaseSelectStatus: 'Please select status',
    remark: 'Remark',
    pleaseInputRemark: 'Please input remark',
    titleRequired: 'Post title cannot be empty',
    codeRequired: 'Post code cannot be empty',
    statusRequired: 'Post status cannot be empty',
    remarkRequired: 'Post content cannot be empty',
    id: 'Post ID',
    name: 'Post Name',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    export: 'Export',
    batchDelete: 'Batch Delete',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    postFormTitleCreate: 'Create Post',
    postFormTitleEdit: 'Edit Post'
  },
  role: {
    name: 'Role Name',
    pleaseInputName: 'Please input role name',
    code: 'Role Code',
    pleaseInputCode: 'Please input role code',
    sort: 'Display Order',
    pleaseInputSort: 'Please input display order',
    status: 'Status',
    pleaseSelectStatus: 'Please select status',
    remark: 'Remark',
    pleaseInputRemark: 'Please input remark',
    nameRequired: 'Role name cannot be empty',
    codeRequired: 'Role code cannot be empty',
    sortRequired: 'Display order cannot be empty',
    statusRequired: 'Status cannot be empty',
    remarkRequired: 'Remark cannot be empty',
    menuPermission: 'Menu Permission',
    dataPermission: 'Data Permission',
    permissionScope: 'Permission Scope',
    deptScope: 'Department Scope',
    selectAll: 'Select All/None',
    expandAll: 'Expand All/Collapse',
    yes: 'Yes',
    no: 'No',
    expand: 'Expand',
    collapse: 'Collapse',
    loading: 'Loading, please wait',
    parentChildLinkage: 'Parent-Child Linkage (Select parent node, auto-select child nodes)',
    id: 'Role ID',
    type: 'Role Type',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    export: 'Export',
    batchDelete: 'Batch Delete',
    functionPermission: 'Function Permission',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    startDate: 'Start Date',
    endDate: 'End Date',
    roleFormTitleCreate: 'Create Role',
    roleFormTitleEdit: 'Edit Role'
  },
  user: {
    assignRole: 'Assign Role',
    username: 'Username',
    nickname: 'Nickname',
    role: 'Role',
    pleaseSelectRole: 'Please select role',
    import: 'User Import',
    dragFileHere: 'Drag file here, or',
    clickToUpload: 'click to upload',
    updateExistingData: 'Whether to update existing user data',
    onlyXlsXlsxAllowed: 'Only xls, xlsx format files are allowed.',
    downloadTemplate: 'Download Template',
    pleaseUploadFile: 'Please upload file',
    uploadSuccessCount: 'Upload success count: ',
    updateSuccessCount: 'Update success count: ',
    updateFailureCount: 'Update failure count: ',
    uploadFailed: 'Upload failed, please upload again!',
    maxOneFile: 'Only one file can be uploaded!',
    importTemplateFileName: 'User Import Template.xls',
    pleaseInputDeptName: 'Please input department name',
    id: 'User ID',
    mobile: 'Mobile',
    email: 'Email',
    password: 'Password',
    sex: 'Gender',
    dept: 'Department',
    post: 'Position',
    status: 'Status',
    remark: 'Remark',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    more: 'More',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    export: 'Export',
    batchDelete: 'Batch Delete',
    startDate: 'Start Date',
    endDate: 'End Date',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    userFormTitleEdit: 'Edit User',
    content: 'Content',
    resetPassword: 'Reset Password'
  },
  workplace: {
    welcome: 'Hello',
    happyDay: 'Wish you happy every day!',
    toady: `It's sunny today`,
    notice: 'Announcement',
    project: 'Project',
    access: 'Project access',
    toDo: 'To do',
    introduction: 'A serious introduction',
    shortcutOperation: 'Quick entry',
    operation: 'Operation',
    index: 'Index',
    personal: 'Personal',
    team: 'Team',
    quote: 'Quote',
    contribution: 'Contribution',
    hot: 'Hot',
    yield: 'Yield',
    dynamic: 'Dynamic',
    push: 'push',
    follow: 'Follow'
  },
  form: {
    input: 'Input',
    inputNumber: 'InputNumber',
    default: 'Default',
    icon: 'Icon',
    mixed: 'Mixed',
    textarea: 'Textarea',
    slot: 'Slot',
    position: 'Position',
    autocomplete: 'Autocomplete',
    select: 'Select',
    selectGroup: 'Select Group',
    selectV2: 'SelectV2',
    cascader: 'Cascader',
    switch: 'Switch',
    rate: 'Rate',
    colorPicker: 'Color Picker',
    transfer: 'Transfer',
    render: 'Render',
    radio: 'Radio',
    button: 'Button',
    checkbox: 'Checkbox',
    slider: 'Slider',
    datePicker: 'Date Picker',
    shortcuts: 'Shortcuts',
    today: 'Today',
    yesterday: 'Yesterday',
    aWeekAgo: 'A week ago',
    week: 'Week',
    year: 'Year',
    month: 'Month',
    dates: 'Dates',
    daterange: 'Date Range',
    monthrange: 'Month Range',
    dateTimePicker: 'DateTimePicker',
    dateTimerange: 'Datetime Range',
    timePicker: 'Time Picker',
    timeSelect: 'Time Select',
    inputPassword: 'input Password',
    passwordStrength: 'Password Strength',
    operate: 'operate',
    change: 'Change',
    restore: 'Restore',
    disabled: 'Disabled',
    disablement: 'Disablement',
    delete: 'Delete',
    add: 'Add',
    setValue: 'Set value',
    resetValue: 'Reset value',
    set: 'Set',
    subitem: 'Subitem',
    formValidation: 'Form validation',
    verifyReset: 'Verify reset',
    remark: 'Remark'
  },
  watermark: {
    watermark: 'Watermark'
  },
  table: {
    table: 'Table',
    index: 'Index',
    title: 'Title',
    author: 'Author',
    createTime: 'Create time',
    action: 'Action',
    pagination: 'pagination',
    reserveIndex: 'Reserve index',
    restoreIndex: 'Restore index',
    showSelections: 'Show selections',
    hiddenSelections: 'Restore selections',
    showExpandedRows: 'Show expanded rows',
    hiddenExpandedRows: 'Hidden expanded rows',
    header: 'Header'
  },
  action: {
    create: 'Create',
    add: 'Add',
    del: 'Delete',
    delete: 'Delete',
    edit: 'Edit',
    update: 'Update',
    preview: 'Preview',
    more: 'More',
    sync: 'Sync',
    save: 'Save',
    detail: 'Detail',
    export: 'Export',
    import: 'Import',
    generate: 'Generate',
    logout: 'Login Out',
    test: 'Test',
    typeCreate: 'Dict Type Create',
    typeUpdate: 'Dict Type Eidt',
    dataCreate: 'Dict Data Create',
    dataUpdate: 'Dict Data Eidt',
    fileUpload: 'File Upload'
  },
  dialog: {
    dialog: 'Dialog',
    open: 'Open',
    close: 'Close'
  },
  sys: {
    api: {
      operationFailed: 'Operation failed',
      errorTip: 'Error Tip',
      errorMessage: 'The operation failed, the system is abnormal!',
      timeoutMessage: 'Login timed out, please log in again!',
      apiTimeoutMessage: 'The interface request timed out, please refresh the page and try again!',
      apiRequestFailed: 'The interface request failed, please try again later!',
      networkException: 'network anomaly',
      networkExceptionMsg:
        'Please check if your network connection is normal! The network is abnormal',

      errMsg401: 'The user does not have permission (token, user name, password error)!',
      errMsg403: 'The user is authorized, but access is forbidden!',
      errMsg404: 'Network request error, the resource was not found!',
      errMsg405: 'Network request error, request method not allowed!',
      errMsg408: 'Network request timed out!',
      errMsg500: 'Server error, please contact the administrator!',
      errMsg501: 'The network is not implemented!',
      errMsg502: 'Network Error!',
      errMsg503: 'The service is unavailable, the server is temporarily overloaded or maintained!',
      errMsg504: 'Network timeout!',
      errMsg505: 'The http version does not support the request!',
      errMsg901: 'Demo mode, no write operations are possible!'
    },
    app: {
      logoutTip: 'Reminder',
      logoutMessage: 'Confirm to exit the system?',
      menuLoading: 'Menu loading...'
    },
    exception: {
      backLogin: 'Back Login',
      backHome: 'Back Home',
      subTitle403: "Sorry, you don't have access to this page.",
      subTitle404: 'Sorry, the page you visited does not exist.',
      subTitle500: 'Sorry, the server is reporting an error.',
      noDataTitle: 'No data on the current page.',
      networkErrorTitle: 'Network Error',
      networkErrorSubTitle:
        'Sorry, Your network connection has been disconnected, please check your network!'
    },
    lock: {
      unlock: 'Click to unlock',
      alert: 'Lock screen password error',
      backToLogin: 'Back to login',
      entry: 'Enter the system',
      placeholder: 'Please enter the lock screen password or user password'
    },
    login: {
      backSignIn: 'Back sign in',
      mobileSignInFormTitle: 'Mobile sign in',
      qrSignInFormTitle: 'Qr code sign in',
      signInFormTitle: 'Sign in',
      signUpFormTitle: 'Sign up',
      forgetFormTitle: 'Reset password',

      signInTitle: 'Backstage management system',
      signInDesc: 'Enter your personal details and get started!',
      policy: 'I agree to the xxx Privacy Policy',
      scanSign: `scanning the code to complete the login`,

      loginButton: 'Sign in',
      registerButton: 'Sign up',
      rememberMe: 'Remember me',
      forgetPassword: 'Forget Password?',
      otherSignIn: 'Sign in with',

      // notify
      loginSuccessTitle: 'Login successful',
      loginSuccessDesc: 'Welcome back',

      // placeholder
      accountPlaceholder: 'Please input username',
      passwordPlaceholder: 'Please input password',
      smsPlaceholder: 'Please input sms code',
      mobilePlaceholder: 'Please input mobile',
      policyPlaceholder: 'Register after checking',
      diffPwd: 'The two passwords are inconsistent',
      userName: 'Account',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      email: 'Email',
      smsCode: 'SMS Code',
      ssoFormTitle: 'Third Party Authorization'
    }
  },
  profile: {
    user: {
      title: 'Personal Information',
      username: 'User Name',
      nickname: 'Nick Name',
      mobile: 'Phone Number',
      email: 'User Mail',
      dept: 'Department',
      posts: 'Position',
      roles: 'Own Role',
      sex: 'Sex',
      man: 'Man',
      woman: 'Woman',
      createTime: 'Created Date'
    },
    info: {
      title: 'Basic Information',
      basicInfo: 'Basic Information',
      resetPwd: 'Reset Password',
      userSocial: 'Social Information'
    },
    rules: {
      nickname: 'Please Enter User Nickname',
      mail: 'Please Input The Email Address',
      truemail: 'Please Input The Correct Email Address',
      phone: 'Please Enter The Phone Number',
      truephone: 'Please Enter The Correct Phone Number'
    },
    password: {
      oldPassword: 'Old PassWord',
      newPassword: 'New Password',
      confirmPassword: 'Confirm Password',
      oldPwdMsg: 'Please Enter Old Password',
      newPwdMsg: 'Please Enter New Password',
      cfPwdMsg: 'Please Enter Confirm Password',
      diffPwd: 'The Passwords Entered Twice No Match'
    }
  },
  cropper: {
    selectImage: 'Select Image',
    uploadSuccess: 'Uploaded success!',
    modalTitle: 'Avatar upload',
    okText: 'Confirm and upload',
    btn_reset: 'Reset',
    btn_rotate_left: 'Counterclockwise rotation',
    btn_rotate_right: 'Clockwise rotation',
    btn_scale_x: 'Flip horizontal',
    btn_scale_y: 'Flip vertical',
    btn_zoom_in: 'Zoom in',
    btn_zoom_out: 'Zoom out',
    preview: 'Preivew'
  },
  tenant: {
    name: 'Tenant Name',
    package: 'Tenant Package',
    contactName: 'Contact Name',
    contactMobile: 'Contact Mobile',
    username: 'Username',
    password: 'Password',
    accountCount: 'Account Quota',
    expireTime: 'Expire Time',
    website: 'Bind Domain',
    status: 'Tenant Status',
    create: 'Create',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    export: 'Export',
    batchDelete: 'Batch Delete',
    systemTenant: 'System Tenant',
    actions: 'Actions',
    tenantList: 'Tenant List',
    tenantFormTitleCreate: 'Create Tenant',
    tenantFormTitleEdit: 'Edit Tenant',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    startDate: 'Start Date',
    endDate: 'End Date',
    createTime: 'Create Time',
    operation: 'Operation'
  },
  tenantPackage: {
    id: 'Package ID',
    name: 'Package Name',
    status: 'Status',
    remark: 'Remark',
    createTime: 'Create Time',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    batchDelete: 'Batch Delete',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    startDate: 'Start Date',
    endDate: 'End Date',
    menuPerms: 'Menu Permissions',
    selectAll: 'Select All/None',
    expandAll: 'Expand/Collapse All',
    expand: 'Expand',
    collapse: 'Collapse',
    loading: 'Loading, please wait...'
  },
  menu: {
    name: 'Menu Name',
    icon: 'Icon',
    sort: 'Sort',
    permission: 'Permission',
    component: 'Component Path',
    componentName: 'Component Name',
    status: 'Status',
    actions: 'Actions',
    edit: 'Edit',
    delete: 'Delete',
    search: 'Search',
    reset: 'Reset',
    create: 'Create',
    expandCollapse: 'Expand/Collapse',
    refreshCache: 'Refresh Menu Cache',
    refreshCacheConfirm: 'Cache will be updated and browser refreshed!',
    functionPermission: 'Function Permission',
    menuRoute: 'Menu Route',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    menuFormTitleCreate: 'Create Menu',
    menuFormTitleEdit: 'Edit Menu'
  },
  commonStatus: {
    0: 'Enabled',
    1: 'Disabled'
  },
  userSex: {
    0: 'Male',
    1: 'Female',
    2: 'Unknown'
  },
  // Mail Module
  mail: {
    accountConfig: 'Mail Configuration',
    templateConfig: 'Mail Template Configuration',
    email: 'Email',
    username: 'Username',
    password: 'Password',
    smtpHost: 'SMTP Server Host',
    smtpPort: 'SMTP Server Port',
    sslEnable: 'Enable SSL',
    starttlsEnable: 'Enable STARTTLS',
    templateCode: 'Template Code',
    templateName: 'Template Name',
    templateTitle: 'Template Title',
    templateContent: 'Template Content',
    mailAccount: 'Mail Account',
    senderName: 'Sender Name',
    enableStatus: 'Enable Status',
    test: 'Test',
    emailRequired: 'Email is required',
    usernameRequired: 'Username is required',
    passwordRequired: 'Password is required',
    hostRequired: 'SMTP server host is required',
    portRequired: 'SMTP server port is required',
    sslEnableRequired: 'SSL setting is required',
    starttlsEnableRequired: 'STARTTLS setting is required',
    templateNameRequired: 'Template name is required',
    templateCodeRequired: 'Template code is required',
    accountIdRequired: 'Mail account is required',
    templateTitleRequired: 'Template title is required',
    templateContentRequired: 'Template content is required',
    templateParamsRequired: 'Template parameters are required',
    statusRequired: 'Status is required',
    logConfig: 'Mail Log Configuration',
    logId: 'Log ID',
    sendTime: 'Send Time',
    toMail: 'Recipient Email',
    userId: 'User ID',
    userType: 'User Type',
    sendStatus: 'Send Status',
    fromMail: 'Sender Email',
    templateId: 'Template ID',
    templateNickname: 'Template Sender Name',
    sendMessageId: 'Send Message ID',
    sendException: 'Send Exception',
    testSend: 'Test',
    recipientEmail: 'Recipient Email',
    pleaseInputRecipientEmail: 'Please enter recipient email',
    paramLabel: 'Parameter {param}',
    pleaseInputParam: 'Please enter {param} parameter',
    paramRequired: 'Parameter {param} is required',
    sendSuccess: 'Send submitted successfully! Send result, see send log ID: {logId}'
  },
  // System Menu Module
  systemMenu: {
    parentMenu: 'Parent Menu',
    menuName: 'Menu Name',
    menuType: 'Menu Type',
    menuIcon: 'Menu Icon',
    routePath: 'Route Path',
    componentPath: 'Component Path',
    componentName: 'Component Name',
    permission: 'Permission',
    sort: 'Sort Order',
    status: 'Menu Status',
    visible: 'Visible',
    alwaysShow: 'Always Show',
    keepAlive: 'Keep Alive',
    mainCategory: 'Main Category',
    show: 'Show',
    hide: 'Hide',
    always: 'Always',
    no: 'No',
    cache: 'Cache',
    noCache: 'No Cache',
    pleaseInputMenuName: 'Please enter menu name',
    pleaseInputRoutePath: 'Please enter route path',
    componentPathExample: 'e.g.: system/user/index',
    componentNameExample: 'e.g.: SystemUser',
    pleaseInputPermission: 'Please enter permission',
    menuNameRequired: 'Menu name is required',
    menuTypeRequired: 'Menu type is required',
    sortRequired: 'Sort order is required',
    routePathRequired: 'Route path is required',
    statusRequired: 'Status is required',
    routePathTooltip:
      'Route path for access, e.g.: `user`. For external URLs, start with `http(s)://`',
    permissionTooltip:
      "Permission string on Controller method, e.g.: @PreAuthorize(`@ss.hasPermission('system:user:list')`)",
    visibleTooltip:
      'When hidden, the route will not appear in the sidebar but can still be accessed',
    alwaysShowTooltip:
      'When set to No, if the menu has only one child menu, it will not show itself but directly show the child menu',
    keepAliveTooltip:
      'When cached, it will be cached by `keep-alive`. The "Component Name" field must be filled',
    pathMustStartWithSlash: 'Path must start with /',
    pathCannotStartWithSlash: 'Path cannot start with /'
  },
  // Notice Module
  notice: {
    title: 'Notice Title',
    content: 'Notice Content',
    type: 'Notice Type',
    status: 'Notice Status',
    id: 'Notice ID',
    push: 'Push',
    pleaseInputTitle: 'Please enter notice title',
    pleaseSelectStatus: 'Please select notice status',
    pleaseSelectType: 'Please select notice type',
    pleaseInputRemark: 'Please enter remark',
    pushConfirm: 'Are you sure to push the selected notice?',
    pushSuccess: 'Push successful',
    titleRequired: 'Notice title is required',
    typeRequired: 'Notice type is required',
    statusRequired: 'Status is required',
    contentRequired: 'Notice content is required'
  },
  // Operation Log Module
  operatelog: {
    title: 'System Log',
    logId: 'Log ID',
    operator: 'Operator',
    module: 'Operation Module',
    operationName: 'Operation Name',
    operationContent: 'Operation Content',
    operationTime: 'Operation Time',
    bizId: 'Business ID',
    operationIp: 'Operation IP',
    detail: 'Detail',
    export: 'Export',
    exportFileName: 'operation-log.xls',
    pleaseInputOperator: 'Please enter operator',
    pleaseInputModule: 'Please enter operation module',
    pleaseInputOperationName: 'Please enter operation name',
    pleaseInputOperationContent: 'Please enter operation content',
    pleaseInputBizId: 'Please enter business ID',
    startDate: 'Start Date',
    endDate: 'End Date',
    traceId: 'Trace ID',
    operatorId: 'Operator ID',
    operatorName: 'Operator Name',
    userAgent: 'User Agent',
    extraParams: 'Extra Parameters',
    requestUrl: 'Request URL'
  },
  // Notify Module
  notify: {
    title: 'Notification Configuration',
    templateName: 'Template Name',
    templateCode: 'Template Code',
    pleaseInputTitle: 'Please enter title',
    pleaseInputCode: 'Please enter code',
    pleaseSelectStatus: 'Please select status',
    test: 'Test',
    myNotifyTitle: 'Notification Configuration',
    readStatus: 'Read Status',
    sendTime: 'Send Time',
    markAsRead: 'Mark as Read',
    markAllAsRead: 'Mark All as Read',
    markAllAsReadSuccess: 'All marked as read successfully!',
    batchReadSuccess: 'Batch read successfully!',
    sender: 'Sender',
    templateContent: 'Template Content',
    templateType: 'Template Type',
    readTime: 'Read Time',
    content: 'Content',
    messageDetail: 'Message Detail',
    messageType: 'Message Type',
    senderName: 'Sender Name',
    pleaseInputName: 'Please enter template name',
    pleaseInputSenderName: 'Please enter sender name',
    pleaseInputContent: 'Please enter template content',
    pleaseSelectType: 'Please select type',
    type: 'Type',
    typeRequired: 'Message type cannot be empty',
    statusRequired: 'Status cannot be empty',
    codeRequired: 'Template code cannot be empty',
    nameRequired: 'Template name cannot be empty',
    nicknameRequired: 'Sender name cannot be empty',
    contentRequired: 'Template content cannot be empty',
    testSend: 'Test Send',
    userType: 'User Type',
    receiverId: 'Receiver ID',
    receiver: 'Receiver',
    pleaseSelectReceiver: 'Please select receiver',
    paramLabel: 'Parameter {param}',
    pleaseInputParam: 'Please enter {param} parameter',
    paramRequired: 'Parameter {param} cannot be empty',
    userId: 'User ID',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    templateId: 'Template ID',
    templateParams: 'Template Parameters',
    pleaseInputUserId: 'Please input user ID',
    pleaseSelectUserType: 'Please select user type',
    pleaseSelectTemplateType: 'Please select template type'
  },
  // OAuth2 Module
  oauth2: {
    title: 'OAuth 2.0 (SSO Single Sign-On)',
    clientId: 'Client ID',
    clientSecret: 'Client Secret',
    clientName: 'Client Name',
    logo: 'Application Logo',
    description: 'Application Description',
    status: 'Status',
    accessTokenValidity: 'Access Token Validity',
    refreshTokenValidity: 'Refresh Token Validity',
    redirectUris: 'Redirect URIs',
    scopes: 'Authorization Scopes',
    autoApprove: 'Auto Approve',
    authorities: 'Authorities',
    resourceIds: 'Resource IDs',
    additionalInformation: 'Additional Information',
    tokenId: 'Token ID',
    tokenValue: 'Token Value',
    tokenType: 'Token Type',
    expiresTime: 'Expires Time',
    userName: 'Username',
    clientIdRequired: 'Client ID is required',
    clientSecretRequired: 'Client Secret is required',
    clientNameRequired: 'Client Name is required',
    pleaseInputClientId: 'Please enter Client ID',
    pleaseInputClientSecret: 'Please enter Client Secret',
    pleaseInputClientName: 'Please enter Client Name',
    pleaseInputDescription: 'Please enter application description',
    pleaseInputRedirectUris: 'Please enter redirect URIs',
    pleaseInputScopes: 'Please enter authorization scopes',
    forceLogout: 'Force Logout',
    userId: 'User ID',
    userType: 'User Type',
    accessToken: 'Access Token',
    refreshToken: 'Refresh Token',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    appName: 'App Name',
    appIcon: 'App Icon',
    appDescription: 'App Description',
    authorizedGrantTypes: 'Authorized Grant Types',
    autoApproveScopes: 'Auto Approve Scopes',
    pleaseInputAppName: 'Please input app name',
    pleaseInputAppDescription: 'Please input app description',
    pleaseInputGrantTypes: 'Please input grant types',
    pleaseInputAuthorities: 'Please input authorities',
    pleaseInputResourceIds: 'Please input resource IDs',
    pleaseInputAdditionalInfo: 'Please input additional info',
    pleaseInputUserId: 'Please input user ID',
    pleaseSelectUserType: 'Please select user type'
  },
  // SMS Module
  sms: {
    channelTitle: 'SMS Channel',
    templateTitle: 'SMS Template',
    logTitle: 'SMS Log',
    channelCode: 'Channel Code',
    channelName: 'Channel Name',
    signature: 'SMS Signature',
    apiKey: 'API Key',
    apiSecret: 'API Secret',
    callbackUrl: 'Callback URL',
    templateCode: 'Template Code',
    templateName: 'Template Name',
    templateContent: 'Template Content',
    templateType: 'Template Type',
    apiTemplateId: 'API Template ID',
    mobile: 'Mobile',
    sendTime: 'Send Time',
    sendCode: 'Send Status',
    receiveTime: 'Receive Time',
    receiveCode: 'Receive Status',
    pleaseInputChannelCode: 'Please enter channel code',
    pleaseInputChannelName: 'Please enter channel name',
    pleaseInputSignature: 'Please enter SMS signature',
    pleaseInputApiKey: 'Please enter API Key',
    pleaseInputApiSecret: 'Please enter API Secret',
    pleaseInputTemplateCode: 'Please enter template code',
    pleaseInputTemplateName: 'Please enter template name',
    pleaseInputTemplateContent: 'Please enter template content',
    pleaseInputApiTemplateId: 'Please enter API template ID',
    pleaseInputMobile: 'Please enter mobile',
    channelCodeRequired: 'Channel code is required',
    channelNameRequired: 'Channel name is required',
    signatureRequired: 'SMS signature is required',
    templateCodeRequired: 'Template code is required',
    templateNameRequired: 'Template name is required',
    templateContentRequired: 'Template content is required',
    templateTypeRequired: 'Template type is required',
    apiTemplateIdRequired: 'API template ID is required',
    logId: 'Log ID',
    template: 'SMS Template',
    userInfo: 'User Info',
    smsTemplateParams: 'SMS Parameters',
    apiSendResult: 'API Send Result',
    apiSerialNo: 'API Serial No',
    apiRequestId: 'API Request ID',
    apiReceiveStatus: 'API Receive Status',
    apiReceiveResult: 'API Receive Result',
    smsSendStatus: 'Send Status',
    smsReceiveStatus: 'Receive Status',
    pleaseSelectSendStatus: 'Please select send status',
    pleaseSelectReceiveStatus: 'Please select receive status',
    pleaseInputTemplateId: 'Please enter template ID',
    pleaseSelectChannel: 'Please select SMS channel',
    pleaseSelectTemplateType: 'Please select SMS type',
    pleaseSelectSmsStatus: 'Please select status',
    pleaseSelectChannelCode: 'Please select channel code',
    pleaseInputCallbackUrl: 'Please enter SMS callback URL',
    enableStatus: 'Enable Status',
    channelId: 'SMS Channel ID',
    channelIdRequired: 'SMS channel ID is required',
    smsStatusRequired: 'Enable status is required',
    apiKeyRequired: 'SMS API account is required',
    mobileRequired: 'Mobile number is required',
    paramLabel: 'Parameter {param}',
    pleaseInputParam: 'Please enter {param} parameter',
    paramRequired: 'Parameter {param} is required',
    sendSuccess: 'Send submitted successfully! Send result, see send log ID: {logId}',
    logExportFileName: 'sms-log.xls',
    templateExportFileName: 'sms-template.xls',
    test: 'Test',
    channel: 'Channel',
    templateId: 'Template ID'
  },
  // Social Module
  social: {
    userTitle: 'Social User',
    clientTitle: 'Social Client',
    socialType: 'Social Type',
    openid: 'OpenID',
    token: 'Token',
    rawTokenInfo: 'Raw Token Info',
    nickname: 'Nickname',
    avatar: 'Avatar',
    rawUserInfo: 'Raw User Info',
    clientId: 'Client ID',
    clientSecret: 'Client Secret',
    agentId: 'Agent ID',
    pleaseInputOpenid: 'Please enter OpenID',
    pleaseInputNickname: 'Please enter nickname',
    pleaseInputClientId: 'Please enter Client ID',
    pleaseInputClientSecret: 'Please enter Client Secret',
    pleaseInputAgentId: 'Please enter Agent ID',
    clientIdRequired: 'Client ID is required',
    clientSecretRequired: 'Client Secret is required',
    socialTypeRequired: 'Social type cannot be empty',
    pleaseSelectType: 'Please select social type',
    appName: 'App Name',
    userType: 'User Type',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    pleaseInputAppName: 'Please input app name',
    pleaseSelectSocialType: 'Please select social type',
    pleaseSelectUserType: 'Please select user type'
  }
}
